password = c("pass1", "pass2"),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call login module supplying data frame,
# user and password cols and reactive trigger
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
log_out = reactive(logout_init())
)
# call the logout module with reactive trigger to hide/show
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
credentials()$info
})
}
shinyApp(ui = ui, server = server)
library(DBI)
library(pool)
library(RPostgreSQL)
library(shiny)
user_base <- dbGetQuery(pool, "Select * from test.test2")
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = Sys.getenv(c("dbname_id")),
host = Sys.getenv(c("host_id")),
user = "rmodba",
password = "!Y}?}LY@Tb#o]sz{]8tm")
shinyApp(ui = ui, server = server)
library(shiny)
user_base <- dbGetQuery(pool, "Select * from test.test2")
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call login module supplying data frame,
# user and password cols and reactive trigger
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init())
)
# call the logout module with reactive trigger to hide/show
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
credentials()$info
})
}
shinyApp(ui = ui, server = server)
password = purrr::map_chr(c("pass1", "pass2"), sodium::password_store),
password = purrr::map_chr(c("pass1", "pass2"), sodium::password_store)
password
sodium::"test"
a = purrr::map_chr(c("pass1", "pass2")
)
a = purrr::map_chr(c("pass1", "pass2"))
mdp <- read.csv("C:/Users/Romain/Downloads/mdp.csv", sep=";")
View(mdp)
password = purrr::map_chr(mdp$mdp, sodium::password_store)
password
test = as.data.frame(password)
View(test)
mdp[-1]
mdp
View(mdp)
mdp <- read.csv("C:/Users/Romain/Downloads/mdp.csv", sep=";")
View(mdp)
mdp$hash <- password
View(mdp)
a = subset(mdp, select = -c("mdp"))
a = subset(mdp, select = -"mdp")
a = subset(mdp, select = -mdp)
View(a)
names(a)[2] <- "password"
dbWriteTable(pool, c("test", "password"), a, row.names=FALSE, append = T)
pool <- dbPool(
drv = dbDriver("PostgreSQL"),
dbname = Sys.getenv(c("dbname_id")),
host = Sys.getenv(c("host_id")),
user = "rmodba",
password = "!Y}?}LY@Tb#o]sz{]8tm")
dbWriteTable(pool, c("test", "password"), a, row.names=FALSE, append = T)
dbWriteTable(pool, c("test", "test2"), a, row.names=FALSE, append = T)
names(a)[2] <- "mdp"
dbWriteTable(pool, c("test", "password"), a, row.names=FALSE, append = T)
library(shiny)
user_base <- dbGetQuery(pool, "Select * from test.password")
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call login module supplying data frame,
# user and password cols and reactive trigger
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = id_user,
pwd_col = mdp,
sodium_hashed = TRUE,
log_out = reactive(logout_init())
)
# call the logout module with reactive trigger to hide/show
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
credentials()$info
})
}
shinyApp(ui = ui, server = server)
identification <- dbGetQuery(pool, "Select salarie as user, mdp as password FROM test.utilisateur JOIN test.password USING (id_user)")
View(identification)
library(shiny)
user_base <- identification
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call login module supplying data frame,
# user and password cols and reactive trigger
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
sodium_hashed = TRUE,
log_out = reactive(logout_init())
)
# call the logout module with reactive trigger to hide/show
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
credentials()$info
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# dataframe that holds usernames, passwords and other user data
user_base <- tibble::tibble(
user = c("user1", "user2"),
password = c("pass1", "pass2"),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
ui <- fluidPage(
# add logout button UI
div(class = "pull-right", shinyauthr::logoutUI(id = "logout")),
# add login panel UI function
shinyauthr::loginUI(id = "login"),
# setup table output to show user info after login
tableOutput("user_table")
)
server <- function(input, output, session) {
# call login module supplying data frame,
# user and password cols and reactive trigger
credentials <- shinyauthr::loginServer(
id = "login",
data = user_base,
user_col = user,
pwd_col = password,
log_out = reactive(logout_init())
)
# call the logout module with reactive trigger to hide/show
logout_init <- shinyauthr::logoutServer(
id = "logout",
active = reactive(credentials()$user_auth)
)
output$user_table <- renderTable({
# use req to only render results when credentials()$user_auth is TRUE
req(credentials()$user_auth)
credentials()$info
})
}
shinyApp(ui = ui, server = server)
region_NA <- st_read("departement.geojson")
library(sf)
ui <- navbarPage("Inscription aux prospections pour le PNA 'Fadet des laîches'", id="main",
tabPanel("Carte", style= "margin-top:-1.5em; margin-left:-1em; margin-right:-1em;",
useShinyjs(),
downloadButton("download_geojson", "Télécharger les données", style="margin-top: 25px; margin-left: 75px; position:absolute;z-index:1;"),
leafletOutput("map") %>% withSpinner(color="#000000"),
tags$link(
rel = "stylesheet",
href = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"
),
tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"
),
tags$script(HTML(js)),
tags$style(HTML("html,body {margin: 0; overflow: hidden;}"))
))
library(shiny)
ui <- navbarPage("Inscription aux prospections pour le PNA 'Fadet des laîches'", id="main",
tabPanel("Carte", style= "margin-top:-1.5em; margin-left:-1em; margin-right:-1em;",
useShinyjs(),
downloadButton("download_geojson", "Télécharger les données", style="margin-top: 25px; margin-left: 75px; position:absolute;z-index:1;"),
leafletOutput("map") %>% withSpinner(color="#000000"),
tags$link(
rel = "stylesheet",
href = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"
),
tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"
),
tags$script(HTML(js)),
tags$style(HTML("html,body {margin: 0; overflow: hidden;}"))
))
library(shinyjs)
ui <- navbarPage("Inscription aux prospections pour le PNA 'Fadet des laîches'", id="main",
tabPanel("Carte", style= "margin-top:-1.5em; margin-left:-1em; margin-right:-1em;",
useShinyjs(),
downloadButton("download_geojson", "Télécharger les données", style="margin-top: 25px; margin-left: 75px; position:absolute;z-index:1;"),
leafletOutput("map") %>% withSpinner(color="#000000"),
tags$link(
rel = "stylesheet",
href = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"
),
tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"
),
tags$script(HTML(js)),
tags$style(HTML("html,body {margin: 0; overflow: hidden;}"))
))
library(shinycssloaders)
ui <- navbarPage("Inscription aux prospections pour le PNA 'Fadet des laîches'", id="main",
tabPanel("Carte", style= "margin-top:-1.5em; margin-left:-1em; margin-right:-1em;",
useShinyjs(),
downloadButton("download_geojson", "Télécharger les données", style="margin-top: 25px; margin-left: 75px; position:absolute;z-index:1;"),
leafletOutput("map") %>% withSpinner(color="#000000"),
tags$link(
rel = "stylesheet",
href = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"
),
tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"
),
tags$script(HTML(js)),
tags$style(HTML("html,body {margin: 0; overflow: hidden;}"))
))
library(leaflet)
ui <- navbarPage("Inscription aux prospections pour le PNA 'Fadet des laîches'", id="main",
tabPanel("Carte", style= "margin-top:-1.5em; margin-left:-1em; margin-right:-1em;",
useShinyjs(),
downloadButton("download_geojson", "Télécharger les données", style="margin-top: 25px; margin-left: 75px; position:absolute;z-index:1;"),
leafletOutput("map") %>% withSpinner(color="#000000"),
tags$link(
rel = "stylesheet",
href = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"
),
tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"
),
tags$script(HTML(js)),
tags$style(HTML("html,body {margin: 0; overflow: hidden;}"))
))
setwd("C:/Users/Romain/Downloads/PNA_Fadet_prospection")
region_NA <- st_read("departement.geojson")
js <- '
$(document).on("shiny:connected", function(){
$("#map").css({
width: window.innerWidth,
height: window.innerHeight
});
$(window).on("resize", function(e){
if(e.target instanceof Window){
$("#map").css({width: window.innerWidth, height: window.innerHeight});
}
});
})'
ui <- navbarPage("Inscription aux prospections pour le PNA 'Fadet des laîches'", id="main",
tabPanel("Carte", style= "margin-top:-1.5em; margin-left:-1em; margin-right:-1em;",
useShinyjs(),
downloadButton("download_geojson", "Télécharger les données", style="margin-top: 25px; margin-left: 75px; position:absolute;z-index:1;"),
leafletOutput("map") %>% withSpinner(color="#000000"),
tags$link(
rel = "stylesheet",
href = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.css"
),
tags$script(
src = "https://cdnjs.cloudflare.com/ajax/libs/jquery-contextmenu/2.8.0/jquery.contextMenu.min.js"
),
tags$script(HTML(js)),
tags$style(HTML("html,body {margin: 0; overflow: hidden;}"))
))
server <- function(input, output, session){
#rajouter légende maille et signe permettant de discriminer les mailles avec inscriptions des autres
maille <- reactivePoll(intervalMillis = 4000, session, checkFunc = function(){
st_read("mailles.geojson")
}, valueFunc = function(){
st_read("mailles.geojson")
}
)
centroides_mailles <- reactive({
centroides_maille <- st_centroid(maille()) %>% group_by(id_maille) %>%
summarise(total_count=n()-1,
.groups = 'drop')
centroides_maille = extract(centroides_maille, geometry, into = c('Lon', 'Lat'), '\\((.*),(.*)\\)', conv = T)
centroides_maille
})
hide(selector = "#main li a[data-value=Carte]")
output$map <- renderLeaflet({
myPal <- colorRampPalette(c("#51a635", "#d93c2e"))
factpal.Div <- colorFactor(myPal(length(maille()$info_mailles)), maille()$info_mailles)
myPal2 <- colorFactor(c("#51a635","#d93c2e"), domain = maille()$info_mailles)
leaflet() %>%
setView(lng = 0.1, lat= 44.5, zoom = 8) %>%
addTiles(group = "Fond de carte standard (OSM)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagerie satelitte (ESRI)") %>%
addPolygons(data = maille(),
layerId = maille()$id_maille,
color = "black",
fillColor = ~factpal.Div(maille()$info_mailles),
fillOpacity = 0.5,
weight = 0.5,
group = "Maille",
label = paste("ID maille :", maille()$id_maille),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto")) %>%
addLabelOnlyMarkers(data = centroides_mailles(),
lng = ~Lon, lat = ~Lat, label = ifelse(centroides_mailles()$total_count == 0, " ", centroides_mailles()$total_count),
labelOptions = labelOptions(noHide = TRUE, direction = 'center', textOnly = TRUE
# ,style=list('color'="white", 'fontSize'="15px")
)) %>%
addLegend(pal = myPal2, values = maille()$info_mailles, group = "Maille",
title = "Légende", position = "topright") %>%
addPolygons(
data = region_NA,
layerId = region_NA$code,
fillOpacity = 0,
weight = 1,
opacity = 1,
color = "black",
options = pathOptions(clickable = FALSE)) %>%
addLayersControl(
overlayGroups = c("Maille"),
baseGroups = c("Fond de carte standard (OSM)", "Imagerie satelitte (ESRI)"),
options = layersControlOptions(collapsed = FALSE))
})
observeEvent(input$map_shape_click, {
showModal(modalDialog(title = "Prospection PNA Papillons de jour",
tags$head(tags$style(".butt3{background-color:#16881B;} .butt3{color: #e6ebef;}")),
fluidRow(align ="center",
actionButton(inputId = "acces_inscriptions",label = "Consulter les inscriptions pour cette maille", class="butt3")),
fluidRow(align ="center",
actionButton(inputId = "faire_inscriptions",label = "S'inscrire à une période de prospection sur cette maille", class="butt3")),
size = "l",
easyClose = TRUE,
fade = TRUE,
footer = tagList(modalButton("Annuler"))
))
})
observeEvent(input$faire_inscriptions, {
### This is the pop up board for input a new row
showModal(modalDialog(title = "Inscription à une période de prospection PNA Papillons de jour",
fluidRow(align ="center",
shinyjs::useShinyjs(),
textInput("nom", "Nom"),
textInput("prenom", "Prénom"),
#structure optionnelle:
textInput("structure", "Structure"),
## Possibilité de cocher les 3 dates :
checkboxGroupInput(
inputId = "dates_passages",
label = "Périodes de prospections",
choices = c("Entre le 20/05 et le 04/06", "Entre le 05/06 et le 25/06", "Entre le 26/06 et le 20/07"),
selected = "Entre le 20/05 et le 04/06"
),
textInput("contact", "Email:"),
tags$head(tags$style(".butt3{background-color:#16881B;} .butt3{color: #e6ebef;}")),
actionButton(inputId = "save_BDD",label = "Enregistrer", class="butt3", style = "width:250px")),
size = "l",
easyClose = TRUE,
fade = TRUE,
footer = tagList(modalButton("Annuler"))
))
})
observeEvent(input$activate_passage2, {
if(input$activate_passage2 == F){
shinyjs::disable("passage2")
} else {
shinyjs::enable("passage2")
}
})
observeEvent(input$activate_passage3, {
if(input$activate_passage3 == F){
shinyjs::disable("passage3")
} else {
shinyjs::enable("passage3")
}
})
dataset<-reactive({
subset(maille(), id_maille == input$map_shape_click$id & nchar(nom) > 0)  })
# observeEvent(input$save_BDD, {
#   shinyalert(title = paste("Votre inscription à la maille ",input$map_shape_click$id, " a bien été enregistrée"), type = "success")
#   removeModal()
# })
output$dt = DT::renderDataTable({
datatable(colnames = c("Prénom" = 4, "Nom" = 3, "Structure" = 5, "Période de prospection n°1" = 7, "Période de prospection n°2" = 8, "Période de prospection n°3" = 9),
dataset(), selection = 'single', rownames= FALSE, escape = FALSE,
options = list(
columnDefs = list(list(className = 'dt-center', targets = "_all"), list(visible=FALSE, targets=c(0,1,5,9))),
language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/French.json'),
scrollY = T, scrollX = T,
# scroller = TRUE,
autoWidth=TRUE,
columnDefs = list(list(className = 'dt-center', targets = '_all')),initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#609e72', 'color': '#fff'});",
"}"))) })
observeEvent(input$acces_inscriptions, {
click <- input$map_shape_click
showModal(modalDialog(title = "Consulter les inscriptions en cours pour les prospections PNA Papillons de jour",
fluidRow(align ="center",
p(paste(length(dataset()$id_maille), " personnes inscrites pour la maille '", input$map_shape_click$id, "' :")),
tags$style(type = "text/css", ".dataTables_wrapper { margin: 20px; }"),
DT::DTOutput("dt")),
size = "l",
easyClose = TRUE,
fade = TRUE,
footer = tagList(modalButton("Annuler"))
))
})
observeEvent(input$save_BDD, {
shinyalert(title = paste("Votre inscription à la maille ",input$map_shape_click$id, " a bien été enregistrée"), type = "success")
removeModal()
})
observeEvent(input$save_BDD, {
req(input$map_shape_click$id)
maille_subset <- maille()[maille()$id_maille == input$map_shape_click$id, ]
isolate({
newLine <- data.frame(
id_maille = input$map_shape_click$id,
info_mailles = maille_subset$info_mailles,
nom = input$nom,
prenom = input$prenom,
structure = input$structure,
contact = input$contact,
passage_1 = as.character(input$dates_passages[1]),
passage_2 = as.character(input$dates_passages[2]),
passage_3 = as.character(input$dates_passages[3]),
geometry = maille_subset$geometry
)})
print(newLine)
print("TEST")
print(head(newLine,1))
# append the new row to the geojson
st_write(head(newLine,1), "mailles.geojson", driver = "GeoJSON", append = TRUE)
})
output$download_geojson <- downloadHandler(
filename = "prospections_mailles.geojson",
content = function(file) {
st_write(maille(), file, driver = "GeoJSON")
}
)
}
shinyApp(ui, server)
library(tidyr)
shinyApp(ui, server)
detach("package:tidyr", unload = TRUE)
library(dplyr)
shinyApp(ui, server)
library(tidyr)
shinyApp(ui, server)
